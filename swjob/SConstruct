# vim: fdm=marker fdl=0

from rsf.proj import *

sw_queue = str(ARGUMENTS.get('queue'))

def run_fm(task, fmbin):
  # setup submit_cmd#{{{
  if task == 'fm-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 1 -cgsp 64
    -o bsub.out -J "fm" ''' % sw_queue
  elif task == 'fm-swintel':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -q %s
    -n 46 -o bsub.out -J "fm" ''' % sw_queue
  else:
    submit_cmd = '~/soft/mpich-3.1.4/bin/mpirun -np 4 '
#}}}
  Flow('shots', 'vel', submit_cmd + '''%s
    vinit=${SOURCES[0]} shots=${TARGETS[0]}
    fm=10 amp=1 dt=0.0015 ns=46 ng=461 nt=2000 nb=30
    sxbeg=0 szbeg=6 jsx=10 jsz=0 gxbeg=0 gzbeg=6 jgx=1 jgz=0 free=1
    ''' % (fmbin), stdout=-1, stdin=0)

def run_born(task, bornbin):
  # setup submit_cmd#{{{
  if task == 'born-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 1 -cgsp 64
    -o bsub.out -J "fm" ''' % sw_queue
  elif task == 'born-swintel':
    submit_cmd = '''/usr/sw-cluster/slurm-14.11.3/bin/srun
    -n 1 -p q_x86_bio '''
  else:
    submit_cmd = '~/soft/mpich-3.1.4/bin/mpirun -np 1 '
#}}}
  Flow('shots_rf shots_bg', 'smvel vel', submit_cmd + '''%s
    vinit=${SOURCES[0]} vreal=${SOURCES[1]} shots_rf=${TARGETS[0]} shots_bg=${TARGETS[1]}
    fm=10 amp=1 dt=0.0015 ns=46 ng=461 nt=2000 nb=30
    sxbeg=0 szbeg=6 jsx=10 jsz=0 gxbeg=0 gzbeg=6 jgx=1 jgz=0 free=1
    ''' % (bornbin), stdout=-1, stdin=0)

def run_fti(task, ftibin):
  # setup submit_cmd#{{{
  if task == 'fti-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 1 -cgsp 64
    -o bsub.out -J "fti" ''' % sw_queue
  elif task == 'fti-swintel':
    submit_cmd = '''/usr/sw-cluster/slurm-14.11.3/bin/srun
    -n 1 -p q_x86_bio '''
  else:
    submit_cmd = '~/soft/mpich-3.1.4/bin/mpirun -np 1 '
#}}}
  Flow('vsnaps absobjs norobjs', 'smvel shots vel', submit_cmd + '''%s
    vin=${SOURCES[0]} shots=${SOURCES[1]} vreal=${SOURCES[2]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 seed=10 maxdv=200 nita=5
    ''' % (ftibin), stdout=-1, stdin=0)

def run_fwi(task, fwibin):
  # setup submit_cmd#{{{
  if task == 'cfwi-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 1 -cgsp 64
    -o bsub.out -J "fwi" ''' % sw_queue
  elif task == 'cfwi-swintel':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -q %s
    -n 46 -o bsub.out -J "fwi" ''' % sw_queue
  else:
    submit_cmd = '~/soft/mpich-3.1.4/bin/mpirun -np 4 '
#}}}
  Flow('vsnaps absobjs norobjs', 'smvel shots', submit_cmd + '''%s
    vin=${SOURCES[0]} shots=${SOURCES[1]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 seed=10 maxdv=200 nita=5
    ''' % (fwibin), stdout=-1, stdin=0)

def run_essfwi(task, essfwibin):
  # setup submit_cmd#{{{
  if task == 'essfwi-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 1 -cgsp 64
    -o bsub.out -J "essfwi" ''' % sw_queue
  elif task == 'essfwi-swintel':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -q %s
    -n 1 -o bsub.out -J "essfwi" ''' % sw_queue
  else:
    submit_cmd = ''
#}}}
  Flow('vsnaps absobjs norobjs', 'smvel shots', submit_cmd + '''%s
    vin=${SOURCES[0]} shots=${SOURCES[1]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 seed=10 maxdv=200 nita=5
    ''' % (essfwibin), stdout=-1, stdin=0)

def run_enfwi(task, enfwibin):
  if task == 'enfwi-sw':
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 7000 -n 20 -np 1 -cgsp 64
    -o bsub.out -J "essfwi" ''' % sw_queue
  elif task == 'enfwi-swintel':
    submit_cmd = '''/usr/sw-cluster/slurm-14.11.3/bin/srun
    -n 20 -p q_x86_bio '''
  else:
    submit_cmd = '~/softs/install/mpi/bin/mpirun -np 1 '

  Flow('vsnaps absobjs norobjs', 'smvel shots vel', submit_cmd + '''%s
    vin=${SOURCES[0]} shots=${SOURCES[1]} vreal=${SOURCES[2]}
    vout=${TARGETS[0]} absobjs=${TARGETS[1]} norobjs=${TARGETS[2]}
    niter=300 seed=10 maxdv=200 nita=5 sigfac=0.2 niterenkf=10 nsample=20
    perin=/home/export/online1/systest/swrice/data/marm/velpert533x193x100.bin
    ''' % (enfwibin), stdout=-1, stdin=0)

def run_noise(SWCompiler, normbin):#{{{
  # setup submit_cmd#{{{
  if SWCompiler:
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 4096 -n 1 -cgsp 64
    -o bsub.out -J "norm" ''' % sw_queue
  else:
    submit_cmd = ''
#}}}
  Flow('shotsnoise', 'shots', submit_cmd + '%s fac=0.05' % noisebin)
#}}}
def run_norm(SWCompiler, normbin):#{{{
  # setup submit_cmd#{{{
  if SWCompiler:
    submit_cmd = '''/usr/sw-mpp/bin/bsub -I -b -m 1 -p -q %s
    -host_stack 1024 -share_size 4096 -n 1 -cgsp 64
    -o bsub.out -J "norm" ''' % sw_queue
  else:
    submit_cmd = ''
#}}}
  Flow('l1norm l2norm', 'vel vsnaps', submit_cmd + '''%s
    realvel=${SOURCES[0]} velset=${SOURCES[1]}
    l1norm=${TARGETS[0]} l2norm=${TARGETS[1]}
    ''' % normbin, stdout=-1, stdin=0)
#}}}
def plotvel(file, title):# {{{
  Plot(file, '''
    grey title="%s" color=j allpos=y pclip=100 bias=1500 gainpanel=1
    scalebar=y barreverse=y barunit=m/s barlabel=Velocity''' % title)
# }}}
def plotcurve(file, title):# {{{
  Plot(file,
    '''sfput n2=1 label1=Iteration unit1= unit2= label2= |
    sfgraph title="%s" dash=0 plotfat=5  grid=y yreverse=n''' % title)
# }}}
def windowAndDraw(vsnaps, base, arr):# {{{
  vels = ''
  for i in arr:
    vels += '%s%s ' % (base, i)
    Plot('%s%d' % (base, i), vsnaps, '''window f3=%d n3=1 |
    grey title="Essfwi, iter %d" color=j allpos=y pclip=100 bias=1500 gainpanel=1
    scalebar=y barreverse=y barunit=m/s barlabel=Velocity''' % (i-1, i))

  Plot('essvelset', vels, 'TwoRows')
# }}}
# fetch marmvel#{{{
#Fetch('marmvel.hh','marm')
Fetch('marmvel.hh', 'marm', server = 'local', top = os.environ['HOME'] + '/online1/workspace/FWI/swfwi/data')
#}}}
# down sampling velocity#{{{
Flow('vel','marmvel.hh',
  '''
  dd form=native |
  window j1=5 j2=5 |
  put label1=Depth  unit1=m label2=Lateral unit2=m
  ''')
#}}}
# smooth initial model#{{{
Flow('smvel', 'vel', '''math output="1/input" |
  smooth rect1=25 rect2=60 |
  math output="1/input"
  ''')
#}}}
# plot real/smoothed velocities#{{{
plotvel('vel', 'Marmousi model')
plotvel('smvel', 'Smoothed model')
Result('marm', 'vel smvel', 'OverUnderAniso')
#}}}
# setup binaries#{{{
bindir    = '../../bin/'
fmbin     = bindir + 'fm-damp'
ftibin = bindir + 'fti-damp'
fwibin = bindir + 'fwi-damp'
essfwibin = bindir + 'essfwi-damp'
enfwibin  = bindir + 'enfwi-damp'
normbin   = bindir + 'norm'
noisebin  = bindir + 'noise'
bornbin     = bindir + 'born'
#}}}

# possible option:
# fm, essfwi, enfwi, noise
# fm-sw, essfwi-sw, enfwi-sw, noise-sw
task = str(ARGUMENTS.get('task'))
if 'fm' in task:
  run_fm(task, fmbin)
  Plot('shots','grey color=g scalebar=y title=shot label2= unit2=', view=0)
elif 'born' in task:
  run_born(task, bornbin)
  Plot('shots_bg','grey color=g scalebar=y title=shot label2= unit2=', view=0)
  Plot('shots_rf','grey color=g scalebar=y title=shot label2= unit2=', view=0)
elif 'fti' in task:
  run_fti(task, ftibin)
elif 'cfwi' in task:
  run_fwi(task, fwibin)
elif 'essfwi' in task:
  run_essfwi(task, essfwibin)
elif 'enfwi' in task:
  run_enfwi(task, enfwibin)
elif 'noise' in task:
  run_noise('sw' in str(task), noisebin)
  Plot('shotsnoise','grey color=g title=shot label2= unit2=', view=0)

if 'fwi' in str(task) or 'fti' in str(task):
  windowAndDraw('vsnaps', 'vel', [50, 100, 200, 300])
  # plot objs norms#{{{
  plotcurve('absobjs', 'Absolute objective value')
  plotcurve('norobjs', 'Normalized objective value')
  run_norm('sw' in str(task), normbin)
  plotcurve('l1norm', 'l1norm')
  plotcurve('l2norm', 'l2norm')
#}}}

End()
